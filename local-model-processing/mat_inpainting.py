#!/usr/bin/env python3
"""
MAT Inpainting for Object Removal
High-quality inpainting using MAT (Mask-Aware Transformer) model
"""

import gradio as gr
import cv2
import numpy as np
import torch
import torch.nn.functional as F
from PIL import Image
import os
import sys
import zipfile
from datetime import datetime
from dataclasses import dataclass

# Add MAT model path
mat_path = "mat_workspace/MAT"
if os.path.exists(mat_path):
    sys.path.insert(0, mat_path)

try:
    from networks.mat import Generator
    MAT_AVAILABLE = True
    print("‚úÖ MAT modules loaded successfully!")
except ImportError as e:
    print(f"‚ùå MAT modules not available: {e}")
    print("Please ensure MAT is properly installed in mat_workspace/MAT/")
    MAT_AVAILABLE = False

@dataclass
class MATConfig:
    checkpoint_path: str = "mat_workspace/MAT/pretrained/celeba_hq.pkl"
    image_size: int = 256
    mask_dilate: int = 10
    mask_blur: int = 5

def get_best_device():
    """Auto-detect best available device"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        try:
            import torch_directml
            dml_device = torch_directml.device()
            print("‚úÖ DirectML detected - Using AMD GPU acceleration!")
            return dml_device
        except:
            return torch.device('cpu')

device = get_best_device()
current_state = {
    'image': None,
    'mask': None,
    'model': None,
    'result': None
}

def load_zip_file(zip_file):
    """Load image and mask from uploaded zip file"""
    if zip_file is None:
        return None, None, "Please upload a zip file"
    
    try:
        # Extract zip file
        extract_dir = f"temp_extract_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(extract_dir, exist_ok=True)
        
        with zipfile.ZipFile(zip_file.name, 'r') as zip_ref:
            zip_ref.extractall(extract_dir)
        
        # Load image and mask
        image_path = os.path.join(extract_dir, "image.png")
        mask_path = os.path.join(extract_dir, "mask.png")
        
        if not os.path.exists(image_path) or not os.path.exists(mask_path):
            return None, None, "Zip file must contain image.png and mask.png"
        
        image = cv2.imread(image_path)
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
        
        if image is None or mask is None:
            return None, None, "Failed to load image or mask from zip file"
        
        current_state['image'] = image
        current_state['mask'] = mask
        
        # Clean up
        import shutil
        shutil.rmtree(extract_dir)
        
        return Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)), Image.fromarray(mask), "‚úÖ Files loaded successfully"
        
    except Exception as e:
        return None, None, f"Error loading zip file: {str(e)}"

def process_inpainting_placeholder():
    """Placeholder for MAT inpainting - will be implemented when MAT is properly set up"""
    if current_state['image'] is None or current_state['mask'] is None:
        return None, None, "Please load image and mask first"
    
    if not MAT_AVAILABLE:
        return None, None, "MAT model not available. Please run setup.py to install MAT."
    
    # For now, return a simple mask overlay as placeholder
    img = current_state['image']
    mask = current_state['mask']
    
    # Create a simple visualization
    mask_3ch = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
    result = cv2.addWeighted(img, 0.7, mask_3ch, 0.3, 0)
    
    current_state['result'] = result
    
    # Convert for display
    original_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    result_pil = Image.fromarray(cv2.cvtColor(result, cv2.COLOR_BGR2RGB))
    
    return original_pil, result_pil, "‚ö†Ô∏è MAT model not fully implemented yet. Showing mask overlay."

def save_result():
    """Save the current result"""
    if current_state.get('result') is None:
        return "No result to save"
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_path = f"results/mat_result_{timestamp}.png"
        os.makedirs("results", exist_ok=True)
        
        cv2.imwrite(result_path, current_state['result'])
        return f"‚úÖ Result saved to: {result_path}"
        
    except Exception as e:
        return f"‚ùå Save failed: {str(e)}"

def create_ui():
    """Create Gradio UI for MAT inpainting"""
    
    with gr.Blocks(
        title="MAT Object Removal",
        theme=gr.themes.Base(),
        css=".container { max-width: 1400px; margin: auto; }"
    ) as demo:
        
        gr.HTML("""
        <div style="text-align: center; padding: 20px;">
            <h1>üé≠ MAT Object Removal</h1>
            <p>High-quality inpainting using MAT (Mask-Aware Transformer) model</p>
            <p><em>Upload the zip file generated by room_removal_ultimate.py</em></p>
        </div>
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                zip_upload = gr.File(
                    label="Upload Zip File",
                    file_types=[".zip"],
                    info="Upload the zip file from mask generation step"
                )
                
                with gr.Group():
                    gr.Markdown("### MAT Parameters")
                    gr.Markdown("*MAT model setup required - run setup.py first*")
                    mask_dilate = gr.Slider(
                        minimum=0, maximum=30, value=10, step=2,
                        label="Mask Dilation"
                    )
                    mask_blur = gr.Slider(
                        minimum=0, maximum=15, value=5, step=1,
                        label="Mask Blur"
                    )
                
                process_btn = gr.Button("üé≠ Remove Objects", variant="primary", size="lg")
                save_btn = gr.Button("üíæ Save Result", variant="secondary", size="lg")
                
                status = gr.Textbox(label="Status", lines=3)
            
            with gr.Column(scale=2):
                with gr.Row():
                    input_image = gr.Image(label="Original Image", interactive=False)
                    input_mask = gr.Image(label="Mask", interactive=False)
                
                with gr.Row():
                    original_display = gr.Image(label="Before", interactive=False)
                    result_display = gr.Image(label="After", interactive=False)
        
        # Event handlers
        def on_upload(zip_file):
            return load_zip_file(zip_file)
        
        zip_upload.upload(
            on_upload,
            inputs=[zip_upload],
            outputs=[input_image, input_mask, status]
        )
        
        process_btn.click(
            process_inpainting_placeholder,
            outputs=[original_display, result_display, status]
        )
        
        save_btn.click(save_result, outputs=[status])
    
    return demo

if __name__ == "__main__":
    print("üöÄ Starting MAT Object Removal")
    print(f"üìç Device: {device}")
    print(f"üß† MAT Available: {MAT_AVAILABLE}")
    
    if not MAT_AVAILABLE:
        print("\n‚ö†Ô∏è MAT not fully set up. Install via setup.py")
    
    demo = create_ui()
    demo.launch(share=False, inbrowser=True)
